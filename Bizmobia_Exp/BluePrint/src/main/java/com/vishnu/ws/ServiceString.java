package com.vishnu.ws;

/**
 *
 * @author Vishnu
 */
public class ServiceString {

    public static String getServiceInterfaceString(String modelnameuc) {
        return "package com.bizmobia.jcb.service;\n"
                + "\n"
                + "import com.bizmobia.jcb.request.RequestModel;\n"
                + "import com.bizmobia.jcb.response.ResponseModel;\n"
                + "\n"
                + "/**\n"
                + " *\n"
                + " * @author Vishnu\n"
                + " */\n"
                + "public interface " + modelnameuc + "Service {\n"
                + "\n"
                + "    public ResponseModel add" + modelnameuc + "(String autho_token, RequestModel requestModel);\n"
                + "\n"
                + "    public ResponseModel update" + modelnameuc + "(String autho_token, RequestModel requestModel);\n"
                + "\n"
                + "    public ResponseModel delete" + modelnameuc + "(String autho_token, RequestModel requestModel);\n"
                + "\n"
                + "    public ResponseModel getAll" + modelnameuc + "(String autho_token, RequestModel requestModel);\n"
                + "\n"
                + "    public ResponseModel get" + modelnameuc + "ById(String autho_token, RequestModel requestModel);\n"
                + "    \n"
                + "}";
    }

    public static String getServiceImplString(String modelnameuc, String modelnamelc) {
        return "package com.bizmobia.jcb.serviceImpl;\n"
                + "\n"
                + "import com.bizmobia.jcb.dao." + modelnameuc + "Dao;\n"
                + "import com.bizmobia.jcb.exception.ResourceNotFoundException;\n"
                + "import com.bizmobia.jcb.models." + modelnameuc + ";\n"
                + "import com.bizmobia.jcb.request.RequestModel;\n"
                + "import com.bizmobia.jcb.response.ResponseModel;\n"
                + "import com.bizmobia.jcb.service.EncryptionFile;\n"
                + "import com.bizmobia.jcb.service.ObjectMapperUtility;\n"
                + "import com.bizmobia.jcb.service." + modelnameuc + "Service;\n"
                + "import com.google.gson.Gson;\n"
                + "import java.util.List;\n"
                + "import org.springframework.beans.factory.annotation.Autowired;\n"
                + "import org.springframework.http.ResponseEntity;\n"
                + "import org.springframework.stereotype.Service;\n"
                + "import org.springframework.transaction.annotation.Transactional;\n"
                + "\n"
                + "/**\n"
                + " *\n"
                + " * @author Vishnu\n"
                + " */\n"
                + "@Service\n"
                + "@Transactional\n"
                + "public class " + modelnameuc + "ServiceImpl implements " + modelnameuc + "Service {\n"
                + "\n"
                + "    @Autowired\n"
                + "    private " + modelnameuc + "Dao " + modelnamelc + "Dao;\n"
                + "\n"
                + "    @Autowired\n"
                + "    private ObjectMapperUtility objectMapperUtility;\n"
                + "\n"
                + "    @Autowired\n"
                + "    private EncryptionFile encryptionFile;\n"
                + "\n"
                + "    private final Gson gson = new Gson();\n"
                + "\n"
                + "    @Override\n"
                + "    public ResponseModel add" + modelnameuc + "(String autho_token, RequestModel requestObj) {\n"
                + "        ResponseModel statuResponse = new ResponseModel();\n"
                + "        try {\n"
                + "            String gendynamikey = encryptionFile.reGenerateEncryptedKey(requestObj.getUserId(), autho_token);\n"
                + "            String decryptdId = encryptionFile.decrypt(gendynamikey, objectMapperUtility.encGenKey, autho_token, requestObj.getUserId().length());\n"
                + "            if (decryptdId.equals(requestObj.getUserId())) {\n"
                + "                " + modelnameuc + " " + modelnamelc + "Obj = objectMapperUtility.jsonToObject(gson.toJson(requestObj.getReqObject()), " + modelnameuc + ".class);\n"
                + "                statuResponse.setRespObject(" + modelnamelc + "Dao.save(" + modelnamelc + "Obj));\n"
                + "                statuResponse.setStatusCode(0);\n"
                + "                statuResponse.setMessage(\"Successfully Inserted\");\n"
                + "            } else {\n"
                + "                statuResponse.setMessage(\"Invalid User Access\");\n"
                + "                statuResponse.setStatusCode(3);\n"
                + "            }\n"
                + "        } catch (Exception e) {\n"
                + "            e.printStackTrace();\n"
                + "            statuResponse.setMessage(\"Plese try after Sometime \" + e.getMessage());\n"
                + "            statuResponse.setStatusCode(1);\n"
                + "        } finally {\n"
                + "            return statuResponse;\n"
                + "        }\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public ResponseModel update" + modelnameuc + "(String autho_token, RequestModel requestObj) {\n"
                + "        ResponseModel statuResponse = new ResponseModel();\n"
                + "        try {\n"
                + "            String gendynamikey = encryptionFile.reGenerateEncryptedKey(requestObj.getUserId(), autho_token);\n"
                + "            String decryptdId = encryptionFile.decrypt(gendynamikey, objectMapperUtility.encGenKey, autho_token, requestObj.getUserId().length());\n"
                + "            if (decryptdId.equals(requestObj.getUserId())) {\n"
                + "                " + modelnameuc + " " + modelnamelc + "Obj = objectMapperUtility.jsonToObject(gson.toJson(requestObj.getReqObject()), " + modelnameuc + ".class);\n"
                + "                " + modelnameuc + " " + modelnamelc + " = " + modelnamelc + "Dao.findById(" + modelnamelc + "Obj.get" + modelnameuc + "Id())\n"
                + "                        .orElseThrow(() -> new ResourceNotFoundException(\"" + modelnameuc + "\", \"id\", " + modelnamelc + "Obj.get" + modelnameuc + "Id()));\n"
                + "                objectMapperUtility.nullAwareBeanCopy(" + modelnamelc + ", " + modelnamelc + "Obj);\n"
                + "                statuResponse.setRespObject(" + modelnamelc + "Dao.save(" + modelnamelc + "));\n"
                + "                statuResponse.setStatusCode(0);\n"
                + "                statuResponse.setMessage(\"Updated Successful\");\n"
                + "            } else {\n"
                + "                statuResponse.setMessage(\"Invalid User Access\");\n"
                + "                statuResponse.setStatusCode(3);\n"
                + "            }\n"
                + "        } catch (Exception e) {\n"
                + "            e.printStackTrace();\n"
                + "            statuResponse.setMessage(\"Plese try after Sometime \" + e.getMessage());\n"
                + "            statuResponse.setStatusCode(1);\n"
                + "        } finally {\n"
                + "            return statuResponse;\n"
                + "        }\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public ResponseModel delete" + modelnameuc + "(String autho_token, RequestModel requestObj) {\n"
                + "        ResponseModel statuResponse = new ResponseModel();\n"
                + "        try {\n"
                + "            String gendynamikey = encryptionFile.reGenerateEncryptedKey(requestObj.getUserId(), autho_token);\n"
                + "            String decryptdId = encryptionFile.decrypt(gendynamikey, objectMapperUtility.encGenKey, autho_token, requestObj.getUserId().length());\n"
                + "            if (decryptdId.equals(requestObj.getUserId())) {\n"
                + "                " + modelnameuc + " " + modelnamelc + "Obj = objectMapperUtility.jsonToObject(gson.toJson(requestObj.getReqObject()), " + modelnameuc + ".class);\n"
                + "                " + modelnameuc + " " + modelnamelc + " = " + modelnamelc + "Dao.findById(" + modelnamelc + "Obj.get" + modelnameuc + "Id())\n"
                + "                        .orElseThrow(() -> new ResourceNotFoundException(\"" + modelnameuc + "\", \"id\", " + modelnamelc + "Obj.get" + modelnameuc + "Id()));\n"
                + "                " + modelnamelc + "Dao.delete(" + modelnamelc + ");\n"
                + "                ResponseEntity.ok().build();\n"
                + "                statuResponse.setStatusCode(0);\n"
                + "                statuResponse.setMessage(\"Deleted Successful\");\n"
                + "            } else {\n"
                + "                statuResponse.setMessage(\"Invalid User Access\");\n"
                + "                statuResponse.setStatusCode(3);\n"
                + "            }\n"
                + "        } catch (Exception e) {\n"
                + "            e.printStackTrace();\n"
                + "            statuResponse.setMessage(\"Plese try after Sometime \" + e.getMessage());\n"
                + "            statuResponse.setStatusCode(1);\n"
                + "        } finally {\n"
                + "            return statuResponse;\n"
                + "        }\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public ResponseModel getAll" + modelnameuc + "(String autho_token, RequestModel requestObj) {\n"
                + "        ResponseModel statuResponse = new ResponseModel();\n"
                + "        try {\n"
                + "            String gendynamikey = encryptionFile.reGenerateEncryptedKey(requestObj.getUserId(), autho_token);\n"
                + "            String decryptdId = encryptionFile.decrypt(gendynamikey, objectMapperUtility.encGenKey, autho_token, requestObj.getUserId().length());\n"
                + "            if (decryptdId.equals(requestObj.getUserId())) {\n"
                + "                List<" + modelnameuc + "> " + modelnamelc + "List = " + modelnamelc + "Dao.findAll();\n"
                + "                if (" + modelnamelc + "List != null) {\n"
                + "                    statuResponse.setStatusCode(0);\n"
                + "                    statuResponse.setMessage(\"Success\");\n"
                + "                    statuResponse.setRespList(" + modelnamelc + "List);\n"
                + "                } else {\n"
                + "                    statuResponse.setMessage(\"No Data Found\");\n"
                + "                    statuResponse.setStatusCode(2);\n"
                + "                }\n"
                + "            } else {\n"
                + "                statuResponse.setMessage(\"Invalid User Access\");\n"
                + "                statuResponse.setStatusCode(3);\n"
                + "            }\n"
                + "        } catch (Exception e) {\n"
                + "            e.printStackTrace();\n"
                + "            statuResponse.setMessage(\"Plese try after Sometime \" + e.getMessage());\n"
                + "            statuResponse.setStatusCode(1);\n"
                + "        } finally {\n"
                + "            return statuResponse;\n"
                + "        }\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public ResponseModel get" + modelnameuc + "ById(String autho_token, RequestModel requestObj) {\n"
                + "        ResponseModel statuResponse = new ResponseModel();\n"
                + "        try {\n"
                + "            String gendynamikey = encryptionFile.reGenerateEncryptedKey(requestObj.getUserId(), autho_token);\n"
                + "            String decryptdId = encryptionFile.decrypt(gendynamikey, objectMapperUtility.encGenKey, autho_token, requestObj.getUserId().length());\n"
                + "            if (decryptdId.equals(requestObj.getUserId())) {\n"
                + "                " + modelnameuc + " " + modelnamelc + "Obj = objectMapperUtility.jsonToObject(gson.toJson(requestObj.getReqObject()), " + modelnameuc + ".class);\n"
                + "                " + modelnameuc + " resultObj = " + modelnamelc + "Dao.findById(" + modelnamelc + "Obj.get" + modelnameuc + "Id())\n"
                + "                        .orElseThrow(() -> new ResourceNotFoundException(\"" + modelnameuc + "\", \"id\", " + modelnamelc + "Obj.get" + modelnameuc + "Id()));\n"
                + "                if (resultObj != null) {\n"
                + "                    statuResponse.setMessage(\"Success\");\n"
                + "                    statuResponse.setStatusCode(0);\n"
                + "                    statuResponse.setRespObject(resultObj);\n"
                + "                }\n"
                + "            } else {\n"
                + "                statuResponse.setMessage(\"Invalid User Access\");\n"
                + "                statuResponse.setStatusCode(3);\n"
                + "            }\n"
                + "        } catch (Exception e) {\n"
                + "            e.printStackTrace();\n"
                + "            statuResponse.setMessage(\"Plese try after Sometime \" + e.getMessage());\n"
                + "            statuResponse.setStatusCode(1);\n"
                + "        } finally {\n"
                + "            return statuResponse;\n"
                + "        }\n"
                + "    }\n"
                + "\n"
                + "}";
    }
}
